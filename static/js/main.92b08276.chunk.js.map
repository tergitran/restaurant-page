{"version":3,"sources":["components/AppBar/AppBar.module.css","components/Cards/Card/Card.module.css","components/Cards/Cards.module.css","components/Cards/Card/Card.jsx","components/AppBar/AppBar.jsx","components/Cards/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","infor","clicked","id","url","breed","className","styles","onClick","Image","src","AppBar","currentScore","bestScore","Title","Score","Cards","useState","imageInfors","setImageInfors","chosenCards","setChosenCards","bestCore","setBestScore","handleCardClicked","cardsList","indexOf","checkNoDoubleCards","newChosenCards","setRandomCards","console","log","length","shuffled_imageInfors","require","shuffle","useEffect","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92b08276.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"AppBar_AppBar__3XC1e\",\"Title\":\"AppBar_Title__2I3Bn\",\"Score\":\"AppBar_Score__38N94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__3H6sW\",\"Image\":\"Card_Image__2tJZa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cards\":\"Cards_Cards__2OfRZ\"};","import React from 'react';\r\nimport styles from './Card.module.css';\r\n\r\nconst Card = props => {\r\n    const { infor, clicked } = props;\r\n    const { id, url, breed } = infor;\r\n    return (\r\n        <div\r\n            className={styles.Card}\r\n            onClick={() => clicked(id)} >\r\n            <img className={styles.Image} src={url} />\r\n            <h3>{breed}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nCard.propTypes = {\r\n\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport styles from './AppBar.module.css';\r\n\r\nconst AppBar = props => {\r\n    const { currentScore, bestScore } = props;\r\n    return (\r\n        <div className={styles.AppBar}>\r\n            <h1 className={styles.Title}>Memory Card</h1>\r\n            <div className={styles.Score}>\r\n                <h3>Score: {currentScore}</h3>\r\n                <h3>Best Score: {bestScore}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAppBar.propTypes = {\r\n\r\n};\r\n\r\nexport default AppBar;","import React, { Fragment, useEffect, useState } from 'react';\r\nimport Card from './Card/Card';\r\nimport styles from './Cards.module.css';\r\nimport AppBar from '../AppBar/AppBar';\r\n\r\n// const imageInfors = [{ id: 0, url: '/beagles.jpg', breed: 'Beagle' }, { id: 1, url: '/Brittany.jpg', breed: 'Brittany' }, { id: 2, url: '/Dachshund.jpg', breed: 'Dachshund' },\r\n// { id: 3, url: '/french-bulldog.jpg', breed: 'French Bulldog' }, { id: 4, url: '/German-Shepherd-dog.jpg', breed: 'German Shepherd' },\r\n// { id: 5, url: '/golden-retriever.jpg', breed: 'Golden Retriever' }, { id: 6, url: '/Pembroke-Welsh-Corgi.jpg', breed: 'Pembroke Welsh Corgi' },\r\n// { id: 7, url: '/Pomeranian.jpg', breed: 'Pomeranian' }, { id: 8, url: '/poodles.jpg', breed: 'Poodles' },\r\n// { id: 9, url: '/Rottweiler.jpg', breed: 'Rottweiler' }, { id: 10, url: '/Siberian-Husky.jpg', breed: 'Siberian Husky' },\r\n// { id: 11, url: '/yorkshire-terrier.jpg', breed: 'Yorkshire Terrier' }];\r\n\r\n\r\nfunction checkNoDoubleCards(cardsList, id) {\r\n    if (cardsList.indexOf(id) !== -1)\r\n        return false;\r\n    return true;\r\n}\r\n\r\nconst Cards = props => {\r\n    const [imageInfors, setImageInfors] = useState([{ id: 0, url: '/beagles.jpg', breed: 'Beagle' }, { id: 1, url: '/Brittany.jpg', breed: 'Brittany' }, { id: 2, url: '/Dachshund.jpg', breed: 'Dachshund' },\r\n    { id: 3, url: '/french-bulldog.jpg', breed: 'French Bulldog' }, { id: 4, url: '/German-Shepherd-dog.jpg', breed: 'German Shepherd' },\r\n    { id: 5, url: '/golden-retriever.jpg', breed: 'Golden Retriever' }, { id: 6, url: '/Pembroke-Welsh-Corgi.jpg', breed: 'Pembroke Welsh Corgi' },\r\n    { id: 7, url: '/Pomeranian.jpg', breed: 'Pomeranian' }, { id: 8, url: '/poodles.jpg', breed: 'Poodles' },\r\n    { id: 9, url: '/Rottweiler.jpg', breed: 'Rottweiler' }, { id: 10, url: '/Siberian-Husky.jpg', breed: 'Siberian Husky' },\r\n    { id: 11, url: '/yorkshire-terrier.jpg', breed: 'Yorkshire Terrier' }]);\r\n    const [chosenCards, setChosenCards] = useState([]);\r\n    // const [random, setRandom] = useState(true);\r\n    const [bestCore, setBestScore] = useState(0);\r\n\r\n    function handleCardClicked(id) {\r\n        if (checkNoDoubleCards(chosenCards, id)) {\r\n            const newChosenCards = [...chosenCards, id];\r\n            setChosenCards(newChosenCards);\r\n            setRandomCards(imageInfors);\r\n            // setRandom(!random);\r\n            console.log(newChosenCards);\r\n        } else {\r\n            console.log(\"Game Over!\");\r\n            if (chosenCards.length > bestCore) {\r\n                setBestScore(chosenCards.length);\r\n            }\r\n            setRandomCards(imageInfors);\r\n            setChosenCards([]);\r\n        }\r\n    }\r\n\r\n    function setRandomCards(imageInfors) {\r\n        // Requiring the lodash library  \r\n        const _ = require(\"lodash\");\r\n\r\n        // Original array  \r\n        // var array = [2, 4, 6, 9, 10]; \r\n\r\n        // Use of _.shuffle() method \r\n        let shuffled_imageInfors = _.shuffle(imageInfors);\r\n\r\n        // Printing the output  \r\n        console.log(shuffled_imageInfors);\r\n\r\n        setImageInfors(shuffled_imageInfors);\r\n\r\n        // return shuffled_imageInfors.map(infor => <Card\r\n        //     clicked={handleCardClicked}\r\n        //     key={infor.id}\r\n        //     infor={infor} />)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRandomCards(imageInfors);\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <img src='/golden-retriever.jpg' />\r\n            <AppBar\r\n                bestScore={bestCore}\r\n                currentScore={chosenCards.length} />\r\n\r\n            <div className={styles.Cards}>\r\n                {imageInfors.map(infor => <Card\r\n                    clicked={handleCardClicked}\r\n                    key={infor.id}\r\n                    infor={infor} />)}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nCards.propTypes = {\r\n\r\n};\r\n\r\nexport default Cards;","import React from 'react';\nimport './App.css';\nimport Cards from './components/Cards/Cards';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}